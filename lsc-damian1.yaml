substitutions:
  devicename: "lsc-damian1"
  friendly_name: lsc-damian1
  device_description: lsc-damian1
  upper_devicename: "lsc damian1"
  voltage_divider: '795'
  current_resistor: '0.001'
  current_multiply: '0.450'

esphome:
  name: $devicename
  comment: ${device_description}

bk72xx:
  board: cb2s

# Enable Home Assistant API
api:
  reboot_timeout: 0s
  #encryption:
    #key: "tpn778NE0riLQNGrJZxH9ja1RwxIJUivWnQYXrVY/g8="

ota:
  - platform: esphome
   # password: "ebb418f0a57fbc55af160867f2e7777f"

# Enable logging
logger:
  baud_rate: 0

wifi:
  #ssid: damian
  #password: "Welkom01#"
  #fast_connect: on
  #power_save_mode: light # NONE (least power saving, Default for ESP8266) LIGHT (Default for ESP32) HIGH (most power saving)
    # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "lsc-Damian1 Fallback Hotspot"
    password: "Welkom01"

captive_portal:

# see: https://esphome.io/components/time.html
time:
  - platform: homeassistant
    id: homeassistant_time

# Enable Web server
web_server:
  port: 80

mdns:

button:
  - platform: restart
    name: Restart

debug:
  update_interval: 30s

text_sensor:
  - platform: debug
    reset_reason:
      name: Reset Reason
  - platform: libretiny
    version:
      name: LibreTiny Version

sensor:
  - platform: uptime
    name: Uptime
  

binary_sensor:
  - platform: gpio
    id: binary_switch_1
    name: "${friendly_name}_switch_bin"
    pin:
      number: P7
      inverted: true
      mode: INPUT_PULLUP
    filters:
      - delayed_on: 10ms
    on_press:
      then:
        - switch.toggle: switch_1

switch:
  - platform: gpio
    id: switch_1
    name: "${friendly_name}_switch"
    pin: P8
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      script.execute: set_status_led
    on_turn_off:
      script.execute: set_status_led

light:
  - platform: status_led
    id: light_red
    name: "${friendly_name}Red led"
    pin: P6
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: binary
    name: "${friendly_name}Status led"
    id: blue_led
    output: output_blue_led
    restore_mode: RESTORE_DEFAULT_OFF
    internal: true

output:
  - platform: gpio
    id: output_blue_led
    pin: P10

select:
  - platform: template
    name: "${friendly_name}Status led mode"
    id: status_led_mode
    optimistic: true
    restore_value: True
    entity_category: CONFIG
    update_interval: never
    options:
      - "Normal"
      - "Invert"
      - "Off"
    initial_option: "Normal"
    on_value:
      script.execute: set_status_led

script:
  - id: set_status_led
    then:
      - if:
          condition:
            lambda: |-
              return strcmp(id(status_led_mode).state.c_str(), "Normal") == 0;
          then:
            if:
              condition:
                switch.is_on: switch_1
              then:
                light.turn_on: blue_led
              else:
                light.turn_off: blue_led
      - if:
          condition:
            lambda: |-
              return strcmp(id(status_led_mode).state.c_str(), "Invert") == 0;
          then:
            if:
              condition:
                switch.is_on: switch_1
              then:
                light.turn_off: blue_led
              else:
                light.turn_on: blue_led
      - if:
          condition:
            lambda: |-
              return strcmp(id(status_led_mode).state.c_str(), "Off") == 0;
          then:
            light.turn_off: blue_led
    
